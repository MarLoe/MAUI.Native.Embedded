<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="_InitXcodeProjects">
    <PropertyGroup>
      <!-- Use the build system default output root, if it is available -->
      <XcodeOutputPathRoot Condition="'$(XcodeOutputPathRoot)' == ''">$(_XcodeProjectDefaultOutputPathRoot)</XcodeOutputPathRoot>
      <XcodeOutputPathRoot Condition="'$(XcodeOutputPathRoot)' == ''">$(MSBuildProjectDirectory)/$(IntermediateOutputPath)xcode/</XcodeOutputPathRoot>
      <_XcodeCachePath Condition="'$(_XcodeCachePath)' == ''">$(XcodeOutputPathRoot)Cache</_XcodeCachePath>
      <_XcodeDerivedDataPath Condition="'$(_XcodeDerivedDataPath)' == ''">$(XcodeOutputPathRoot)DerivedData</_XcodeDerivedDataPath>
    </PropertyGroup>
  </Target>


  <Target Name="_ResolveXcodeProjects" Condition="'@(XcodeProjects)' != ''">
    <ItemGroup>
      <XcodeProjects>
        <!-- If unset, we need to set NoSigning to false          -->
        <!-- so that msbuild  to itterates correctly.             -->
        <NoSigning Condition="'%(XcodeProjects.NoSigning)' == ''">false</NoSigning>
      </XcodeProjects>

      <!-- This is important! In order for UniqueId to work,      -->
      <!-- We must make sure to refereence all metadata that has  -->
      <!-- an influence on how the Xcode project is build.        -->
      <!-- The idea is that every unique combination of Scheme,   -->
      <!-- Configuration etc. creates an individual Xcode archive.-->
      <XcodeProjects>
        <Scheme Condition="'%(XcodeProjects.Scheme)' == ''">%(XcodeProjects.Filename)</Scheme>
        <Configuration Condition="'%(XcodeProjects.Configuration)' == ''">$(Configuration)</Configuration>
        <XcodeParams Condition="'%(XcodeProjects.NoSigning)' == 'true'">$(XcodeParams) CODE_SIGN_IDENTITY=”” CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO</XcodeParams>
        <UniqueId Condition="'%(XcodeProjects.UniqueId)' == ''">$([System.Guid]::NewGuid())</UniqueId>
      </XcodeProjects>

      <!-- We cannot add the ArchivePath in one go,               -->
      <!-- so we have to do it separately once we have            -->
      <!-- all the metadata like Scheme, Configuration etc.       -->
      <XcodeProjects>
        <ArchivePath>$(XcodeOutputPathRoot)%(XcodeProjects.Scheme)-%(XcodeProjects.Configuration)-%(XcodeProjects.UniqueId).xcarchive</ArchivePath>
      </XcodeProjects>
    </ItemGroup>
  </Target>


  <Target Name="_UpdateXcodeProjectsVersion" Condition="'@(XcodeProjects)' != ''">
    <!-- The Xcode projects must have the same version as our app.  -->
    <!-- So we will add the app version via the command line.       -->
    <ItemGroup>
      <XcodeProjects>
        <Version Condition="'%(XcodeProjects.UniqueId)' != ''">$(ApplicationVersion)</Version>
        <DisplayVersion Condition="'%(XcodeProjects.UniqueId)' != ''">$(ApplicationDisplayVersion)</DisplayVersion>
      </XcodeProjects>
    </ItemGroup>
  </Target>


  <Target Name="_BuildXcodeProjectsArchive" Condition="'@(XcodeProjects)' != ''">
    <PropertyGroup>
      <_XcodeDestination Condition="$(TargetPlatformIdentifier) == 'ios'">iOS</_XcodeDestination>
      <_XcodeDestination Condition="$(RuntimeIdentifier.Contains('iossimulator')) == true">iOS Simulator</_XcodeDestination>
      <XCodeCommonParams>$(XCodeCommonParams) -destination 'generic/platform=$(_XcodeDestination)'</XCodeCommonParams>
    </PropertyGroup>

    <ItemGroup>
      <XcodeProjects>
        <_DerivedData>$(_XcodeDerivedDataPath)/%(XcodeProjects.UniqueId)</_DerivedData>
        <_PackageCache>$(_XcodeCachePath)/%(XcodeProjects.UniqueId)</_PackageCache>
        <_XcodeProjectVersion Condition="'%(XcodeProjects.Version)' != ''">CURRENT_PROJECT_VERSION=%(XcodeProjects.Version)</_XcodeProjectVersion>
        <_XcodeMarketingVersion Condition="'%(XcodeProjects.DisplayVersion)' != ''">MARKETING_VERSION=%(XcodeProjects.DisplayVersion)</_XcodeMarketingVersion>
      </XcodeProjects>
    </ItemGroup>

    <Exec
      Condition="'$(SkipXcodeProjects)' != 'true'"
      Outputs="%(XcodeProjects.ArchivePath)"
      Command="xcrun xcodebuild archive \
        -project '%(XcodeProjects.FullPath)' \
        -scheme '%(XcodeProjects.Scheme)' \
        -configuration '%(XcodeProjects.Configuration)' \
        -archivePath '%(XcodeProjects.ArchivePath)' \
        -derivedDataPath '%(XcodeProjects._DerivedData)' \
        -packageCachePath '%(XcodeProjects._PackageCache)' \
        %(XcodeProjects._XcodeProjectVersion) \
        %(XcodeProjects._XcodeMarketingVersion) \
        %(XcodeProjects.XcodeParams) \
        $(XCodeCommonParams)" />

    <!-- 
      This built in task adds parameters to the xcodebuild that cannot be controlled,
      and might lead to compiler issues. Thus it is not feasable to use.
    <CreateXcArchive
      ProjectPath="%(XcodeProjects.FullPath)"
      SchemeName="%(XcodeProjects.Scheme)"
      Configuration="%(XcodeProjects.Configuration)"
      ArchivePlatform="generic/platform=$(_XcodeDestination)"
      DerivedDataPath="$(_XcodeDerivedDataPath)/%(XcodeProjects.UniqueId)"
      PackageCachePath="$(_XcodeCachePath)/%(XcodeProjects.UniqueId)"
      OutputPath="%(XcodeProjects.ArchivePath)"
      WorkingDirectory="%(XcodeProjects.RootDir)%(XcodeProjects.Directory)" />
    -->
  </Target>


  <PropertyGroup>
    <_InitNativeEmbeddedDependsOn />

    <_ResolveNativeEmbeddedDependsOn />

    <_ProcessNativeEmbeddedDependsOn>
      _InitXcodeProjects;
      _ResolveNativeEmbedded;
      _ResolveXcodeProjects;
      _UpdateXcodeProjectsVersion;
      _BuildXcodeProjectsArchive;
    </_ProcessNativeEmbeddedDependsOn>

    <ProcessNativeEmbeddedDependsOn>
      _InitNativeEmbedded;
      _ProcessNativeEmbedded;
    </ProcessNativeEmbeddedDependsOn>

    <VerifyNativeEmbeddedDependsOn />
  </PropertyGroup>


  <Target Name="_InitNativeEmbedded" DependsOnTargets="$(_InitNativeEmbeddedDependsOn)" />

  <Target Name="_ResolveNativeEmbedded" DependsOnTargets="$(_ResolveNativeEmbeddedDependsOn)" />

  <Target Name="_ProcessNativeEmbedded" DependsOnTargets="$(_ProcessNativeEmbeddedDependsOn)" />

  <Target Name="ProcessNativeEmbedded" BeforeTargets="ProcessMauiAssets" DependsOnTargets="$(ProcessNativeEmbeddedDependsOn)" />

  <Target Name="VerifyNativeEmbedded" AfterTargets="Build" DependsOnTargets="$(VerifyNativeEmbeddedDependsOn)" />

  <!-- This target is for debug purposes. See README.md for information -->
  <Target Name="BuildNativeEmbedded">
    <CallTarget Name="ProcessNativeEmbedded" />
  </Target>

</Project>